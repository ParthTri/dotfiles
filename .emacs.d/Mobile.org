#+TITLE: Mobile Emacs Configuration
#+AUTHOR: Parth Trivedi
#+DESCRIPTION: My Emacs Configuration that I use on a daily basis on my phone
#+PROPERTY: header-args:emacs-lisp :tangle ./mobile-init.el :comments org

* Table of Contents :toc:
- [[#general][General]]
  - [[#basic-stuff][Basic Stuff]]
  - [[#use-package][Use package]]
  - [[#backups][Backups]]
  - [[#theme][Theme]]
  - [[#which-key][Which Key]]
  - [[#keybindings][Keybindings]]
  - [[#helm][Helm]]
  - [[#hydra][Hydra]]
  - [[#evil][Evil]]
  - [[#company][Company]]
  - [[#flyspell][Flyspell]]
- [[#org-mode][Org Mode]]
  - [[#org-configuration][Org Configuration]]
  - [[#custom-faces][Custom Faces]]
  - [[#agenda][Agenda]]
  - [[#crypt][Crypt]]
  - [[#epa][Epa]]
  - [[#journal][Journal]]
  - [[#toc][toc]]
  - [[#temporary-buffer][Temporary Buffer]]
- [[#development][Development]]
  - [[#git][Git]]
- [[#other][Other]]
  - [[#elfeed][Elfeed]]
  - [[#ledger][Ledger]]

* General
** Basic Stuff
*** No flashing or alerting
#+begin_src emacs-lisp  
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Remove bar
#+begin_src emacs-lisp  
  (scroll-bar-mode -1)    ; Remove bar
  (tool-bar-mode -1)      ; Disable the tool bar
  (tooltip-mode -1)       ; Disable tooltips
  (set-fringe-mode 10)    ; Provide breathing room
#+end_src
*** Font
#+begin_src emacs-lisp  
  (set-face-attribute 'default nil :font "Fira Code" :height 115)
#+end_src
*** Line Numbers
#+begin_src emacs-lisp  
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'visual)
  (dolist (mode '(org-mode-hook
                  org-agenda-mode-hook
                  dired-mode-hook
                  image-mode-hook
                  pdf-view-mode-hook
                  term-mode-hook
                  treemacs-mode-hook
                  elfeed-mode-hook
                  eww-mode-hook
                  eshell-mode-hook
                  helm-mode-hook
                  vterm-mode-hook))
                  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
*** Make ESC quit prompts
#+begin_src emacs-lisp  
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Use package
#+begin_src emacs-lisp  
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
      (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Backups
Write backups to ~/.emacs.d/backup/
#+begin_src emacs-lisp  
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying      t  ; Don't de-link hard links
      version-control        t  ; Use version numbers on backups
      delete-old-versions    t  ; Automatically delete excess backups:
      kept-new-versions      20 ; how many of the newest versions to keep
      kept-old-versions      5) ; and how many of the old
#+end_src
** Theme
#+begin_src emacs-lisp  
  (use-package atom-one-dark-theme
    :ensure t
    :config
    (load-theme 'atom-one-dark t)
    (setq atom-one-dark-theme-force-faces-for-mode t))
#+end_src
** Which Key
#+begin_src emacs-lisp  
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle 0.3))
#+end_src
** Keybindings
#+begin_src emacs-lisp  
  (use-package general
    :ensure t
    :config
    (general-create-definer pt/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (pt/leader-keys
    "SPC" '(helm-find-files :which-key "files")
    "RET" '(helm-bookmarks :which-key "bookmarks"))

  (pt/leader-keys
    "b" '(:ignore b :which-key "buffer")
    "bk" '(kill-this-buffer :which-key "kill")
    "bi" '(ibuffer :which-key "ibuffer")
    "bb" '(helm-buffers-list :which-key "switch"))

  (pt/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tv" '(visual-line-mode :which-key "visual line mode")
    "ts" '(hydra-text-scale/body :which-key "scale text"))

  (pt/leader-keys
    "w" '(:ignore w :which-key "window")
    "ws" '(evil-window-split :which-key "horizontal split")
    "wv" '(evil-window-vsplit :which-key "vertical split")
    "wd" '(evil-window-delete :which-key "delete")
    "wr" '(evil-window-rotate-upwards :which-key "rotate")
    "wh" '(evil-window-left :which-key "left")
    "wj" '(evil-window-down :which-key "down")
    "wk" '(evil-window-up :which-key "up")
    "wl" '(evil-window-right :which-key "right"))

  (pt/leader-keys
    "o" '(:ignore o :which-key "open")
    "oe" '(eshell :which-key "eshell"))

  (pt/leader-keys
    "O" '(:ignore O :which-key "Org")
    "Oa" '(org-agenda :which-key "agenda")
    "Oc" '(org-capture :which-key "capture"))

  (global-set-key (kbd "M-/") 'comment-or-uncomment-region)
#+end_src
** Helm
#+begin_src emacs-lisp  
  (use-package helm
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'helm-M-x)
    (if (daemonp)
        (setq helm-display-function 'helm-default-display-buffer)
      (setq helm-display-function 'helm-display-buffer-in-own-frame
            helm-display-buffer-reuse-frame t
            helm-use-undecorated-frame-option t))
    (helm-mode 1)
    )
#+end_src
** Hydra
#+begin_src emacs-lisp  
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src
** Evil
#+begin_src emacs-lisp  
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Company
#+begin_src emacs-lisp  
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0))

  (use-package company-box
    :ensure t
    :after (company-mode)
    :hook (company-mode . company-box-mode))
#+end_src
** Flyspell
#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
               (add-hook hook (lambda () (flycheck-mode 1))))
#+end_src
* Org Mode
** Org Configuration
#+begin_src emacs-lisp  
  (setq org-directory "~/org/")

  (defun pt/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . pt/org-mode-setup)
    :bind (:map org-mode-map
                ("C-C e" . org-mobile-push)
                ("C-c i" . org-mobile-pull)
                ("C-c l" . latex-frag)
                ("C-c L" . latex-frag-mult)
                ("C-c R" . org-table-sort-lines))

    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t))

  (setq org-hide-emphasis-markers t)
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                           '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (setq org-duration-format (quote h:mm))
#+end_src
** Custom Faces
#+begin_src emacs-lisp  
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.1)))))
#+end_src
** Agenda
#+begin_src emacs-lisp  
  (setq org-agenda-files '("~/org/gtd.org"
                       "~/Documents/School Work/Subjects.org"))
#+end_src

*** Capture
#+begin_src emacs-lisp  
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq gtd-file "~/org/gtd.org")
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline gtd-file "Tasks")
           "** TODO %?\n %i\n")
          ("s" "School" entry (file+headline gtd-file "Projects")
           "** TODO [/]%?\n")
          ("p" "Project" entry (file+headline gtd-file "Projects")
           "** %? [/]\n#+COOKIE_DATA:todo\n %i\n")
          ("l" "Something for Later" entry (file+headline gtd-file "Later")
           "** %?\n %i\n")
          ("i" "Idea" entry (file+headline "~/org/Ideas.org" "General")
           "** %?\n %i\n ")
          ("B" "Book" entry (file+headline "~/org/Books.org" "Other")
           "** TODO %?\n")))
#+end_src
*** Refile
#+begin_src emacs-lisp  
  (setq org-refile-targets
        '(("~/org/gtd.org" :maxlevel . 1)
          ("~/org/Ideas.org" :maxlevel . 1)
          ("~/org/done.archive.org" :maxlevel . 1)
          ("~/org/Books.org" :maxlevel . 1)))
#+end_src
*** Tags
#+begin_src emacs-lisp  
  (setq org-tag-alist '((:startgroup)
                        ("@work" . ?W)
                        ("@home" . ?H)
                        (:endgroup)
                        ("work" . ?w)
                        ("privy" . ?p)
                        ("school" . ?s)
                        ("dev" . ?d)
                        ("paid" . ?P)
                        ("volunteer" . ?V)
                        ("crypt" . ?c)))
#+end_src
*** Keywords
#+begin_src emacs-lisp  
  (setq org-todo-keywords
        '((sequencep "TODO(t)" "ONGOING(o)" "NEXT(n)" "|" "DONE(d/!)")
          (sequencep "WAITING(w@/!)" "|" "CANCELLED(c@/!)" "PAUSED(p@/!)" "MEETING")))
#+end_src
*** Keyword Faces
#+begin_src emacs-lisp  
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "Purple" :weight bold )
          ("ONGOING" :foreground "Orange" :weight bold)
          ("NEXT" :foreground "DeepSkyBlue" :weight bold)
          ("DONE" :foreground "SeaGreen3" :weight bold)
          ("WAITING" :foreground "DeepSkyBlue" :weight bold)
          ("CANCELLED" :foreground "Red" :weight bold)
          ("PAUSED" :foreground "OrangeRed" :weight bold)
          ("MEETING" :foreground "forest green" :weight bold)))
#+end_src
*** Views 
#+begin_src emacs-lisp  
  (setq org-agenda-dim-blocked-tasks nil)
#+end_src
**** All
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("n" "All"
           ((agenda "" nil)
            (todo "ONGOING"
                  ((org-agenda-overriding-header "Ongoing Tasks")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (todo "WAITING"
                  ((org-agenda-overriding-header "Waiting On"))))
           nil)
          ))
#+end_src
** Crypt
#+begin_src emacs-lisp
  (use-package org-crypt
    :ensure nil
    :after org
    :bind (:map org-mode-map
                ("C-c d" . org-decrypt-entry))
    :config
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance '("crypt"))
    :custom
    (setq org-crypt-key "0x49A69233"))

#+end_src
** Epa
#+begin_src emacs-lisp
  (use-package epa
    :ensure t
    :config
    (custom-set-variables '(epa-gpg-program "/usr/local/bin/gpg"))
    (epa-file-enable))
#+end_src
** Journal
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :init
    (pt/leader-keys
      "Oj" '(org-journal-new-entry :which-key "journal"))
    :config
    (setq org-journal-dir "~/journal/"
          org-journal-date-format "%A, %d %B %Y"))
#+end_src
** toc
#+begin_src emacs-lisp  
  (use-package toc-org
    :ensure t
    :config (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src
** Temporary Buffer
#+begin_src emacs-lisp
  (defun create-tmp-org ()
    "Create a temporary org buffer"
    (interactive)
    (create-file-buffer "tmp.org")
    (persp-add-buffer "tmp.org")
    (switch-to-buffer "tmp.org")
    (org-mode))

  (pt/leader-keys
    "Oo" '(create-tmp-org :which-key "tmp org"))
#+end_src
* Development
*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (pt/leader-keys
      "g" '(:ignore g :which-key "git")
      "gs" '(magit-stage-file :which-key "stage file")
      "gS" '(magit-stage :which-key "stage all")
      "gc" '(magit-commit :which-key "commit")
      "gg" '(magit-status :which-key "status")))
#+end_src
*** Git Gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode t))

  (pt/leader-keys
    "tg" '(git-gutter-mode :which-key "gutter"))
#+end_src
* Other
** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer))

  (defun update-and-open-elfeed ()
    (interactive)
    (elfeed-update)
    (elfeed))

  (pt/leader-keys
    "or" '(update-and-open-elfeed :which-key "elfeed"))
#+end_src

*** Elfeed Org
#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (setq elfeed-show-entry-switch 'display-buffer)
    (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))
    :init
    (elfeed-org))
#+end_src
** Ledger
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t
    :mode ("\\.journal\\'" "\\.ledger.*\\'"))
#+end_src
